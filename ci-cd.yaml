name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      # 1) Repository auschecken
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2) Docker Buildx einrichten (optional, falls Multi-Arch benötigt wird)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3) Rust Toolchain installieren
      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # 4) Build (Release)
      - name: Cargo Build (Release)
        run: cargo build --release

      # 5) Tests ausführen
      - name: Run Tests
        run: cargo test --all

      # 5.1) Monitoring Integration Tests ausführen
      - name: Run Monitoring Integration Tests
        run: cargo test --test monitoring_tests

      # 6) Statische Codeanalyse mit Clippy
      - name: Run Cargo Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      # 7) Sicherheitsüberprüfung mit Cargo Audit
      - name: Run Cargo Audit
        run: cargo audit

  docker_build:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 1) Repository auschecken
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2) Docker Buildx einrichten
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3) In Docker Hub einloggen (Secrets im Repository konfigurieren)
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4) Docker-Image bauen und pushen
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/my_dex:latest

  deploy:
    name: Deploy to Kubernetes
    needs: docker_build
    runs-on: ubuntu-latest
    steps:
      # 1) Repository auschecken
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2) Helm installieren, um das Deployment durchzuführen
      - name: Set up Helm
        uses: azure/setup-helm@v1

      # 3) Kubeconfig einrichten – speichere deinen Kubeconfig-Inhalt in einem Secret namens KUBECONFIG
      - name: Configure Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config

      # 4) Deployment mittels Helm ausführen
      - name: Deploy to Kubernetes via Helm
        run: |
          helm upgrade --install my-dex ./helm \
            --namespace dex --create-namespace \
            --set image.repository=${{ secrets.DOCKER_USERNAME }}/my_dex,image.tag=latest \
            --wait --timeout 300s
